---
- name: Make prosody directory.
  file:
    path: "{{ volumes_root }}/prosody"
    state: directory
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"

- name: Make extra prosody directories.
  file:
    path: "{{ volumes_root }}/prosody/{{ item }}"
    state: directory
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"
  with_items:
    - "vhosts"
    - "certdump"

- name: Copy new vhosts configs
  template:
    src: vhost.cfg.lua.j2
    dest: "{{ volumes_root }}/prosody/vhosts/{{ item }}.cfg.lua"
    force: no
    owner: "{{ uid_output.stdout }}"
    group: "{{ gid_output.stdout }}"
  loop: "{{ prosody.vhosts }}"

- name: Copy prosody docker-compose.yml file into place.
  template:
    src: docker-compose.prosody.yml.j2
    dest: "{{ volumes_root }}/prosody/docker-compose.yml"
  vars:
    tor_domain: "{{ tor_http_domain_file.stdout | default('') }}"

- name: Copy prosody certdumper Dockerfile and run.sh
  template:
    src: "{{ item.src }}"
    dest: "{{ volumes_root }}/prosody/{{ item.dest }}"
    mode: "{{ item.mode }}"
  loop: [{src: 'certdump.Dockerfile', dest: 'certdump/Dockerfile', mode: 'a'}, {src: 'run.sh.j2', dest: 'certdump/run.sh', mode: 'a+x'}]

- name: Configure prosody systemd service.
  template:
    src: service.j2
    dest: /etc/systemd/system/prosody.service

- name: Start prosody
  systemd:
    name: prosody
    enabled: "yes"
    daemon-reload: "yes"
    state: started
